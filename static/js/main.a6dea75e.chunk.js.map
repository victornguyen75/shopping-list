{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","item","setItem","pending","setPending","completed","setCompleted","moveItem","id","sourceList","destinationList","actionType","itemIndex","findIndex","newDestinationList","push","name","category","quantity","price","newSourceList","filter","onSubmit","e","preventDefault","newPending","Math","random","value","onChange","target","placeholder","type","disabled","map","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLA8EeA,MA3Ef,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,KAuBPC,EAAW,SAACC,EAAIC,EAAYC,EAAiBC,GACjD,IAAIC,EAAYH,EAAWI,WAAU,SAAAZ,GACnC,OAAOA,EAAKO,KAAOA,KAGjBM,EAAkB,YAAOJ,GAC7BI,EAAmBC,KAAK,CACpBP,GAAIC,EAAWG,GAAWJ,GAC1BQ,KAAMP,EAAWG,GAAWI,KAC5BC,SAAUR,EAAWG,GAAWK,SAChCC,SAAUT,EAAWG,GAAWM,SAChCC,MAAOV,EAAWG,GAAWO,QAGlB,gBAAfR,EAA+BL,EAAaQ,GAAsBV,EAAWU,GAE7E,IAAIM,EAAgBX,EAAWY,QAAO,SAAApB,GACpC,OAAOA,EAAKO,KAAOA,KAGN,gBAAfG,EAA+BP,EAAWgB,GAAiBd,EAAac,IAG1E,OAAQ,qCACR,2DACE,uBAAME,SA3CQ,SAAAC,GACdA,EAAEC,iBACF,IAAIC,EAAU,YAAOtB,GAErBsB,EAAWV,KACT,CACEP,GAAI,EAAIkB,KAAKC,SACbX,KAAMf,EACNgB,SAAU,GACVC,SAAU,GACVC,MAAO,KAIXf,EAAWqB,GACXvB,EAAQ,KA4BR,UACE,uBAAO0B,MAAO3B,EAAM4B,SAAU,SAAAN,GAAC,OAAIrB,EAAQqB,EAAEO,OAAOF,QAAQG,YAAY,mBACxE,wBAAQC,KAAK,SAASC,UAAWhC,EAAjC,oBAEF,+CACA,6BACGE,EAAQ+B,KAAI,SAAAjC,GACX,OACE,oBAAkBkC,QAAS,kBAAM5B,EAASN,EAAKO,GAAIL,EAASE,EAAW,gBAAvE,SACGJ,EAAKe,MADCf,EAAKO,SAMpB,iDACA,6BACGH,EAAU6B,KAAI,SAAAjC,GACb,OACE,oBAAkBkC,QAAS,kBAAM5B,EAASN,EAAKO,GAAIH,EAAWF,EAAS,cAAvE,SACGF,EAAKe,MADCf,EAAKO,aCzDT4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6dea75e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nfunction App() {\n  const [item, setItem] = useState('');\n  const [pending, setPending] = useState([]);\n  const [completed, setCompleted] = useState([]);\n\n  const addItem = e => {\n    e.preventDefault();\n    let newPending = [...pending];\n\n    newPending.push(\n      {\n        id: 1 + Math.random(),\n        name: item,\n        category: '',\n        quantity: '',\n        price: '',\n      }\n    );\n\n    setPending(newPending);\n    setItem('');\n  }\n\n  const moveItem = (id, sourceList, destinationList, actionType) => {\n    let itemIndex = sourceList.findIndex(item => {\n      return item.id === id;\n    });\n\n    let newDestinationList = [...destinationList];\n    newDestinationList.push({ \n        id: sourceList[itemIndex].id,\n        name: sourceList[itemIndex].name,\n        category: sourceList[itemIndex].category,\n        quantity: sourceList[itemIndex].quantity,\n        price: sourceList[itemIndex].price,\n    });\n\n    actionType === \"toCompleted\" ? setCompleted(newDestinationList) : setPending(newDestinationList);\n\n    let newSourceList = sourceList.filter(item => {\n      return item.id !== id;\n    });\n\n    actionType === \"toCompleted\" ? setPending(newSourceList) : setCompleted(newSourceList);\n  }\n\n  return (<>\n  <h1>Shopping List Application</h1>\n    <form onSubmit={addItem}>\n      <input value={item} onChange={e => setItem(e.target.value)} placeholder=\"Add a new item\"/>\n      <button type=\"submit\" disabled={!item}>Add</button>\n    </form>\n    <h2>Pending Items</h2>\n    <ul>\n      {pending.map(item => {\n        return (\n          <li key={item.id} onClick={() => moveItem(item.id, pending, completed, \"toCompleted\")}>\n            {item.name}\n          </li>\n        );\n      })}\n    </ul>\n    <h2>Completed Items</h2>\n    <ul>\n      {completed.map(item => {\n        return (\n          <li key={item.id} onClick={() => moveItem(item.id, completed, pending, \"toPending\")}>\n            {item.name}\n          </li>\n        );\n      })}\n    </ul>\n  </>);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}