{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","item","setItem","pending","setPending","completed","setCompleted","moveItem","id","sourceList","destinationList","actionType","itemIndex","findIndex","newSourceList","filter","newDestinationList","push","name","category","quantity","price","sort","alphabetize","onSubmit","e","preventDefault","newPending","Math","random","value","onChange","target","placeholder","type","disabled","map","onClick","item1","item2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAsFeA,MAnFf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,KAwBPC,EAAW,SAACC,EAAIC,EAAYC,EAAiBC,GACjD,IAAIC,EAAYH,EAAWI,WAAU,SAAAZ,GACnC,OAAOA,EAAKO,KAAOA,KAGjBM,EAAgBL,EAAWM,QAAO,SAAAd,GACpC,OAAOA,EAAKO,KAAOA,KAGjBQ,EAAkB,YAAON,GAC7BM,EAAmBC,KAAK,CACtBT,GAAIC,EAAWG,GAAWJ,GAC1BU,KAAMT,EAAWG,GAAWM,KAC5BC,SAAUV,EAAWG,GAAWO,SAChCC,SAAUX,EAAWG,GAAWQ,SAChCC,MAAOZ,EAAWG,GAAWS,QAG/BP,EAAcQ,KAAKC,GACnBP,EAAmBM,KAAKC,GAEL,gBAAfZ,GACFP,EAAWU,GACXR,EAAaU,KAEbZ,EAAWY,GACXV,EAAaQ,KAIjB,OAAQ,qCACR,2DACE,uBAAMU,SAnDQ,SAAAC,GACdA,EAAEC,iBACF,IAAIC,EAAU,YAAOxB,GAErBwB,EAAWV,KACT,CACET,GAAI,EAAIoB,KAAKC,SACbX,KAAMjB,EACNkB,SAAU,GACVC,SAAU,GACVC,MAAO,KAIXM,EAAWL,KAAKC,GAChBnB,EAAWuB,GACXzB,EAAQ,KAmCR,UACE,uBAAO4B,MAAO7B,EAAM8B,SAAU,SAAAN,GAAC,OAAIvB,EAAQuB,EAAEO,OAAOF,QAAQG,YAAY,mBACxE,wBAAQC,KAAK,SAASC,UAAWlC,EAAjC,oBAEF,+CACA,6BACGE,EAAQiC,KAAI,SAAAnC,GACX,OACE,oBAAkBoC,QAAS,kBAAM9B,EAASN,EAAKO,GAAIL,EAASE,EAAW,gBAAvE,SACGJ,EAAKiB,MADCjB,EAAKO,SAMpB,iDACA,6BACGH,EAAU+B,KAAI,SAAAnC,GACb,OACE,oBAAkBoC,QAAS,kBAAM9B,EAASN,EAAKO,GAAIH,EAAWF,EAAS,cAAvE,SACGF,EAAKiB,MADCjB,EAAKO,aAWxB,SAASe,EAAYe,EAAOC,GAC1B,OAAOD,EAAMpB,KAAOqB,EAAMrB,KAAO,GAAK,ECzFxC,IAYesB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.faa23095.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nfunction App() {\n  const [item, setItem] = useState('');\n  const [pending, setPending] = useState([]);\n  const [completed, setCompleted] = useState([]);\n\n  const addItem = e => {\n    e.preventDefault();\n    let newPending = [...pending];\n\n    newPending.push(\n      {\n        id: 1 + Math.random(),\n        name: item,\n        category: '',\n        quantity: '',\n        price: '',\n      }\n    );\n\n    newPending.sort(alphabetize);\n    setPending(newPending);\n    setItem('');\n  }\n\n  const moveItem = (id, sourceList, destinationList, actionType) => {\n    let itemIndex = sourceList.findIndex(item => {\n      return item.id === id;\n    });\n\n    let newSourceList = sourceList.filter(item => {\n      return item.id !== id;\n    });\n\n    let newDestinationList = [...destinationList];\n    newDestinationList.push({ \n      id: sourceList[itemIndex].id,\n      name: sourceList[itemIndex].name,\n      category: sourceList[itemIndex].category,\n      quantity: sourceList[itemIndex].quantity,\n      price: sourceList[itemIndex].price,\n    });\n\n    newSourceList.sort(alphabetize);\n    newDestinationList.sort(alphabetize);\n\n    if (actionType === \"toCompleted\") {\n      setPending(newSourceList);\n      setCompleted(newDestinationList);\n    } else {\n      setPending(newDestinationList);\n      setCompleted(newSourceList);\n    }\n  }\n\n  return (<>\n  <h1>Shopping List Application</h1>\n    <form onSubmit={addItem}>\n      <input value={item} onChange={e => setItem(e.target.value)} placeholder=\"Add a new item\"/>\n      <button type=\"submit\" disabled={!item}>Add</button>\n    </form>\n    <h2>Pending Items</h2>\n    <ul>\n      {pending.map(item => {\n        return (\n          <li key={item.id} onClick={() => moveItem(item.id, pending, completed, \"toCompleted\")}>\n            {item.name}\n          </li>\n        );\n      })}\n    </ul>\n    <h2>Completed Items</h2>\n    <ul>\n      {completed.map(item => {\n        return (\n          <li key={item.id} onClick={() => moveItem(item.id, completed, pending, \"toPending\")}>\n            {item.name}\n          </li>\n        );\n      })}\n    </ul>\n  </>);\n}\n\nexport default App;\n\nfunction alphabetize(item1, item2) {\n  return item1.name > item2.name ? 1 : -1;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}